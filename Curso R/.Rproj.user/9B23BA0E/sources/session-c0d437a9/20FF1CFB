{
    "id": "20FF1CFB",
    "path": null,
    "project_path": null,
    "type": "r_dataframe",
    "hash": "0",
    "contents": "",
    "dirty": false,
    "created": 1746893487456.0,
    "source_on_save": false,
    "relative_order": 13,
    "properties": {
        "expression": "structure(list(x = structure(c(\"function (..., list = character(), package = NULL, lib.loc = NULL, \",  \"    verbose = getOption(\\\"verbose\\\"), envir = .GlobalEnv, overwrite = TRUE) \",  \"{\", \"    fileExt <- function(x) {\", \"        db <- grepl(\\\"\\\\\\\\.[^.]+\\\\\\\\.(gz|bz2|xz)$\\\", x)\",  \"        ans <- sub(\\\".*\\\\\\\\.\\\", \\\"\\\", x)\", \"        ans[db] <- sub(\\\".*\\\\\\\\.([^.]+\\\\\\\\.)(gz|bz2|xz)$\\\", \\\"\\\\\\\\1\\\\\\\\2\\\", \",  \"            x[db])\", \"        ans\", \"    }\", \"    my_read_table <- function(...) {\",  \"        lcc <- Sys.getlocale(\\\"LC_COLLATE\\\")\", \"        on.exit(Sys.setlocale(\\\"LC_COLLATE\\\", lcc))\",  \"        Sys.setlocale(\\\"LC_COLLATE\\\", \\\"C\\\")\", \"        read.table(...)\",  \"    }\", \"    stopifnot(is.character(list))\", \"    names <- c(as.character(substitute(list(...))[-1L]), list)\",  \"    if (!is.null(package)) {\", \"        if (!is.character(package)) \",  \"            stop(\\\"'package' must be a character vector or NULL\\\")\",  \"    }\", \"    paths <- find.package(package, lib.loc, verbose = verbose)\",  \"    if (is.null(lib.loc)) \", \"        paths <- c(path.package(package, TRUE), if (!length(package)) getwd(), \",  \"            paths)\", \"    paths <- unique(normalizePath(paths[file.exists(paths)]))\",  \"    paths <- paths[dir.exists(file.path(paths, \\\"data\\\"))]\",  \"    dataExts <- tools:::.make_file_exts(\\\"data\\\")\", \"    if (length(names) == 0L) {\",  \"        db <- matrix(character(), nrow = 0L, ncol = 4L)\", \"        for (path in paths) {\",  \"            entries <- NULL\", \"            packageName <- if (file_test(\\\"-f\\\", file.path(path, \",  \"                \\\"DESCRIPTION\\\"))) \", \"                basename(path)\",  \"            else \\\".\\\"\", \"            if (file_test(\\\"-f\\\", INDEX <- file.path(path, \\\"Meta\\\", \",  \"                \\\"data.rds\\\"))) {\", \"                entries <- readRDS(INDEX)\",  \"            }\", \"            else {\", \"                dataDir <- file.path(path, \\\"data\\\")\",  \"                entries <- tools::list_files_with_type(dataDir, \",  \"                  \\\"data\\\")\", \"                if (length(entries)) {\",  \"                  entries <- unique(tools::file_path_sans_ext(basename(entries)))\",  \"                  entries <- cbind(entries, \\\"\\\")\", \"                }\",  \"            }\", \"            if (NROW(entries)) {\", \"                if (is.matrix(entries) && ncol(entries) == 2L) \",  \"                  db <- rbind(db, cbind(packageName, dirname(path), \",  \"                    entries))\", \"                else warning(gettextf(\\\"data index for package %s is invalid and will be ignored\\\", \",  \"                  sQuote(packageName)), domain = NA, call. = FALSE)\",  \"            }\", \"        }\", \"        colnames(db) <- c(\\\"Package\\\", \\\"LibPath\\\", \\\"Item\\\", \\\"Title\\\")\",  \"        footer <- if (missing(package)) \", \"            paste0(\\\"Use \\\", sQuote(paste(\\\"data(package =\\\", \\\".packages(all.available = TRUE))\\\")), \",  \"                \\\"\\\\n\\\", \\\"to list the data sets in all *available* packages.\\\")\",  \"        else NULL\", \"        y <- list(title = \\\"Data sets\\\", header = NULL, results = db, \",  \"            footer = footer)\", \"        class(y) <- \\\"packageIQR\\\"\",  \"        return(y)\", \"    }\", \"    paths <- file.path(paths, \\\"data\\\")\",  \"    for (name in names) {\", \"        found <- FALSE\", \"        for (p in paths) {\",  \"            tmp_env <- if (overwrite) \", \"                envir\",  \"            else new.env()\", \"            if (file_test(\\\"-f\\\", file.path(p, \\\"Rdata.rds\\\"))) {\",  \"                rds <- readRDS(file.path(p, \\\"Rdata.rds\\\"))\",  \"                if (name %in% names(rds)) {\", \"                  found <- TRUE\",  \"                  if (verbose) \", \"                    message(sprintf(\\\"name=%s:\\\\t found in Rdata.rds\\\", \",  \"                      name), domain = NA)\", \"                  thispkg <- sub(\\\".*/([^/]*)/data$\\\", \\\"\\\\\\\\1\\\", p)\",  \"                  thispkg <- sub(\\\"_.*$\\\", \\\"\\\", thispkg)\",  \"                  thispkg <- paste0(\\\"package:\\\", thispkg)\",  \"                  objs <- rds[[name]]\", \"                  lazyLoad(file.path(p, \\\"Rdata\\\"), envir = tmp_env, \",  \"                    filter = function(x) x %in% objs)\", \"                  break\",  \"                }\", \"                else if (verbose) \", \"                  message(sprintf(\\\"name=%s:\\\\t NOT found in names() of Rdata.rds, i.e.,\\\\n\\\\t%s\\\\n\\\", \",  \"                    name, paste(names(rds), collapse = \\\",\\\")), \",  \"                    domain = NA)\", \"            }\", \"            files <- list.files(p, full.names = TRUE)\",  \"            files <- files[grep(name, files, fixed = TRUE)]\",  \"            if (length(files) > 1L) {\", \"                o <- match(fileExt(files), dataExts, nomatch = 100L)\",  \"                paths0 <- dirname(files)\", \"                paths0 <- factor(paths0, levels = unique(paths0))\",  \"                files <- files[order(paths0, o)]\", \"            }\",  \"            if (length(files)) {\", \"                for (file in files) {\",  \"                  if (verbose) \", \"                    message(\\\"name=\\\", name, \\\":\\\\t file= ...\\\", .Platform$file.sep, \",  \"                      basename(file), \\\"::\\\\t\\\", appendLF = FALSE, \",  \"                      domain = NA)\", \"                  ext <- fileExt(file)\",  \"                  if (basename(file) != paste0(name, \\\".\\\", ext)) \",  \"                    found <- FALSE\", \"                  else {\",  \"                    found <- TRUE\", \"                    switch(ext, R = , r = {\",  \"                      library(\\\"utils\\\")\", \"                      sys.source(file, chdir = TRUE, envir = tmp_env)\",  \"                    }, RData = , rdata = , rda = load(file, envir = tmp_env), \",  \"                      TXT = , txt = , tab = , tab.gz = , tab.bz2 = , \",  \"                      tab.xz = , txt.gz = , txt.bz2 = , txt.xz = assign(name, \",  \"                        my_read_table(file, header = TRUE, as.is = FALSE), \",  \"                        envir = tmp_env), CSV = , csv = , csv.gz = , \",  \"                      csv.bz2 = , csv.xz = assign(name, my_read_table(file, \",  \"                        header = TRUE, sep = \\\";\\\", as.is = FALSE), \",  \"                        envir = tmp_env), found <- FALSE)\",  \"                  }\", \"                  if (found) \", \"                    break\",  \"                }\", \"                if (verbose) \", \"                  message(if (!found) \",  \"                    \\\"*NOT* \\\", \\\"found\\\", domain = NA)\", \"            }\",  \"            if (found) \", \"                break\", \"        }\",  \"        if (!found) {\", \"            warning(gettextf(\\\"data set %s not found\\\", sQuote(name)), \",  \"                domain = NA)\", \"        }\", \"        else if (!overwrite) {\",  \"            for (o in ls(envir = tmp_env, all.names = TRUE)) {\",  \"                if (exists(o, envir = envir, inherits = FALSE)) \",  \"                  warning(gettextf(\\\"an object named %s already exists and will not be overwritten\\\", \",  \"                    sQuote(o)))\", \"                else assign(o, get(o, envir = tmp_env, inherits = FALSE), \",  \"                  envir = envir)\", \"            }\", \"            rm(tmp_env)\",  \"        }\", \"    }\", \"    invisible(names)\", \"}\"), dim = c(153L,  1L), dimnames = list(c(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",  \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\",  \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\",  \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\",  \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\",  \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\",  \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\", \"74\",  \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\", \"83\", \"84\", \"85\",  \"86\", \"87\", \"88\", \"89\", \"90\", \"91\", \"92\", \"93\", \"94\", \"95\", \"96\",  \"97\", \"98\", \"99\", \"100\", \"101\", \"102\", \"103\", \"104\", \"105\", \"106\",  \"107\", \"108\", \"109\", \"110\", \"111\", \"112\", \"113\", \"114\", \"115\",  \"116\", \"117\", \"118\", \"119\", \"120\", \"121\", \"122\", \"123\", \"124\",  \"125\", \"126\", \"127\", \"128\", \"129\", \"130\", \"131\", \"132\", \"133\",  \"134\", \"135\", \"136\", \"137\", \"138\", \"139\", \"140\", \"141\", \"142\",  \"143\", \"144\", \"145\", \"146\", \"147\", \"148\", \"149\", \"150\", \"151\",  \"152\", \"153\"), \"\"), class = \"noquote\")), row.names = c(NA, -153L ), class = \"data.frame\")",
        "caption": "data",
        "totalObservations": 153,
        "displayedObservations": 153,
        "variables": 1,
        "cacheKey": "F235998E",
        "object": "",
        "environment": "_rs_no_env",
        "contentUrl": "grid_resource/gridviewer.html?env=_rs_no_env&obj=&cache_key=F235998E&max_display_columns=50",
        "preview": 0,
        "source_window_id": "",
        "Source": "Source"
    },
    "folds": "",
    "lastKnownWriteTime": 1746893410,
    "encoding": "",
    "collab_server": "",
    "source_window": "",
    "last_content_update": 1746893487456,
    "read_only": false,
    "read_only_alternatives": []
}